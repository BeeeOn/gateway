# The purpose of this configuration is to setup syslog-ng
# server to collect logs from gateways and store them for
# easier analysis without needing a direct access to the
# particular running devices.
#
# The server expects TLS connections containing client
# certificate identifying the gateway. The authorization
# is based on CA verification and ID verification in the
# CN field. Note that gateways do not have hostname nor
# IP address in their certificates as these are unknown
# during certificate generation.
#
# The appropriate CA file's name must be the Distinguished
# Name of the certificate generated as:
#
#  $ ln -s CA.pem `openssl x509 -nout -hash -in CA.pem`.0
#
# It is also possible to define a whitelist of allowed
# gateway IDs. Gateways not specified in the whitelist
# file would be ignored.

@version: 3.9

@define TLS_PORT 9999
@define TLS_KEY  ""
@define TLS_CERT ""
@define TLS_CA   ""
@define DIR_BASE "/var/log/beeeon/gateways"
@define GW_WHITELIST "/var/run/beeeon/gateways.whitelist"

# Receive connections from gateways with TLS certificate
# signed by out certificate authority.
source s_network {
	syslog(
		ip("0.0.0.0")
		port(`TLS_PORT`)
		transport("tls")
		tls(
			key-file(`TLS_KEY`)
			cert-file(`TLS_CERT`)
			ca-dir(`TLS_CA`)
			peer-verify(required-trusted)
			ssl-options(no-sslv2, no-sslv3, no-tlsv1, no-tlsv11)
			trusted-dn("*, O=BeeeOn, L=Brno, ST=Czech Republic, C=CZ")
		)
	);
};

# check certificate for valid gateway ID in CN
filter f_valid_id {
	match("^1[0-9]{15}$"
		value(".tls.x509_cn")
	);
};

# check whether the particular gateway is whitelisted
#filter f_whitelist_id {
#	in-list(`GW_WHITELIST`
#		value(".tls.x509_cn")
#	);
#};

# store logs as single gateway per directory
destination d_file {
	file("`DIR_BASE`/${.tls.x509_cn}/gateway.log"
		create-dirs(yes)
	);
};

log {
	source(s_network);

	filter(f_valid_id);
#	filter(f_whitelist_id);

	destination(d_file);
};
