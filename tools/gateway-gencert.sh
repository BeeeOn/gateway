test -z "${C}"  && C="CZ"
test -z "${ST}" && ST="Czech Republic"
test -z "${L}"  && L="Brno"
test -z "${O}"  && O="BeeeOn"
test -z "${EMAIL}" && EMAIL="testing@beeeon.org"

test -z "${RSA_SIZE}" && RSA_SIZE=4096
test -z "${CERT_DAYS}" && CERT_DAYS=1

# Prepare string to include as subject in the generated gateway certificate.
# Only the Gateway ID is an input argument. The rest can be overriden from
# the environment.
cert_subj()
{
	id="$1"

	echo "/CN=${id}/C=${C}/ST=${ST}/L=${L}/O=${O}/emailAddress=${EMAIL}"
}

# Generate an RSA key-pair into the given file.
rsa_gen_pair()
{
	file="$1"
	size="$2"

	openssl genrsa -out "${file}" ${size}
}

# Extract the public key from the given RSA key-pair.
rsa_extract_public()
{
	file="$1"
	out="$2"

	openssl rsa -in "${file}" -pubout -out "${out}"
}

# Generate certificate signing request for a given key-pair and certificate
# subject. The subject is likely to be generated by cert_subj().
cert_request()
{
	key_pair="$1"
	subj="$2"

	openssl req -sha256 -new -key "${key_pair}" -nodes -subj "${subj}"
}

# Sign the request by the key-pair from a selected CA. Self-signing is also
# possible by passing the same key-pair that has been used for the CSR generation.
# Validity is given in a number of days.
cert_sign()
{
	request="$1"
	ca_pair="$2"
	days="$3"
	out="$4"
	ca_cert="$5"

	if [ -z "${ca_cert}" ]; then
		echo "Self-signing with ${ca_pair}" >&2
		openssl x509 -in "${request}" -out "${out}" -req -signkey "${ca_pair}" -days ${days}
	else
		echo "Signing with ${ca_pair} and ${ca_cert}" >&2
		openssl x509 -in "${request}" -out "${out}" -req -CA "${ca_cert}" \
			-CAkey "${ca_pair}" -CAcreateserial -days ${days}
	fi
}

# Compute SHA-256 digest of the given file.
mk_digest()
{
	file="$1"

	openssl dgst -sha256 "${file}"
}

# Compute SHA-256 fingerprint of the given certificate.
cert_fingerprint()
{
	file="$1"

	openssl x509 -sha256 -in "${file}" -noout -fingerprint
}

die()
{
	echo "$@" >&2
	exit 1
}

# ==============================

opts=`getopt -o "hfp:c:C:G:o:k:" -- "$@"`
if [ "$?" != 0 ]; then
	die "invalid options given: $@"
fi

eval set -- "${opts}"

while [ -n "$1" ]; do
	case "$1" in
	-h)
		echo "$0 [-h] [-f] options -G <id>"
		echo "  -p <file> - provide a gateway key-pair, otherwise a new one is generated"
		echo "  -k <file> - file where to extract the gateway public key"
		echo "  -c <file> - provide a CA key-pair, otherwise a self-signed certificate is created"
		echo "  -C <file> - provide a CA certificate, otherwise a self-signed certificate is created"
		echo "  -o <file> - target file containing the signed gateway certificate"
		echo "  -f        - force overriding of the existing signed gateway certificate"
		echo "  -G <id>   - provide gateway ID (mandatory)"

		exit 0
	;;
	-p)
		gateway_pair="$2"
		shift
		shift
		;;
	-k)
		gateway_pubkey="$2"
		shift
		shift
		;;
	-c)
		ca_pair="$2"
		shift
		shift
		;;
	-C)
		ca_cert="$2"
		shift
		shift
		;;
	-G)
		gateway_id="$2"
		shift
		shift
		;;
	-o)
		gateway_cert="$2"
		shift
		shift
		;;
	-f)
		force=y
		shift
		;;
	--)
		shift
		break
		;;
	*)
		break
		;;
	esac
done

# Gateway ID is mandatory and must always be given.
if [ -z "${gateway_id}" ]; then
	die "missing mandatory gateway ID (option -G)"
fi

if [ -z "${gateway_cert}" ]; then
	gateway_cert="gateway.pem"
fi

# If -C is given, also -c must be specified.
if [ -n "${ca_cert}" ] && [ -z "${ca_pair}" ]; then
	die "No CA private key specified (-c)"
fi

# File where to store the generated and signed gateway certificate
# must not exists unless -f option is set.
if [ -f "${gateway_cert}" ]; then
	if [ "${force}" != "y" ]; then
		die "certificate '${gateway_cert}' already exists"
	else
		echo "Overriding existing '${gateway_cert}'" >&2
	fi
fi

if [ -z "${gateway_pair}" ]; then
	gateway_pair="gateway.pair"
fi

# Generate gateway RSA key-pair if it does not exist.
if [ ! -f "${gateway_pair}" ]; then
	rsa_gen_pair "${gateway_pair}" ${RSA_SIZE} \
		|| die "failed to generate gateway key-pair"
fi

# Public key is generated alone if requested.
if [ -n "${gateway_pubkey}" ]; then
	rsa_extract_public "${gateway_pair}" "${gateway_pubkey}"
fi

# Signing is possible by a CA key-pair or if it is not given
# the gateway key-pair is used (leads to a self-signed certificate).
if [ -z "${ca_pair}" ]; then
	ca_pair="${gateway_pair}"
fi

csr="${gateway_cert}.csr"

cert_request "${gateway_pair}" "`cert_subj "${gateway_id}"`" > "${csr}" \
	|| die "failed to create gateway certificate signing request"

cert_sign "${csr}" "${ca_pair}" ${CERT_DAYS} "${gateway_cert}" "${ca_cert}" \
	|| die "failed to sign gateway certificate"

# List digests and fingerprints of the resulted files.
mk_digest "${gateway_pair}"

if [ -n "${gateway_pubkey}" ]; then
	mk_digest "${gateway_pubkey}"
fi

mk_digest "${gateway_cert}"
cert_fingerprint "${gateway_cert}"

if [ "${gateway_pair}" != "${ca_pair}" ]; then
	mk_digest "${ca_pair}"
fi
